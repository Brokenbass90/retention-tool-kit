{"version":3,"sources":["components/PdfMaker/PdfMaker.jsx","components/HtmlWindow/HtmlWindow.jsx","components/ConvertButton/ConvertButton.js","components/TxtToJson/TxtToJson.jsx","components/TxtToJson/processFiles.js","App.js","index.js"],"names":["PdfMaker","_ref","html","setHtml","React","createElement","className","AceEditor","mode","theme","onChange","newValue","name","value","editorProps","$blockScrolling","setOptions","useWorker","width","height","HtmlWindow","htmlContent","srcDoc","title","ConvertButton","isConverting","setIsConverting","useState","onClick","async","response","fetch","method","headers","Content-Type","body","ok","blob","url","window","URL","createObjectURL","a","document","href","download","appendChild","click","removeChild","revokeObjectURL","console","error","disabled","TxtToJson","onClose","isVisible","folderName","setFolderName","fileInputRef","useRef","updateFolderNameAndFiles","files","length","webkitRelativePath","split","handleConvert","processFiles","Promise","resolve","reject","Error","jsonFileName","prompt","outputName","replace","zip","JSZip","fileReadPromises","Array","from","map","file","resolveFile","rejectFile","reader","FileReader","onload","e","_content$match","blocks","target","result","match","reduce","acc","block","index","key","concat","String","padStart","trim","localeMatch","locale","jsonContent","JSON","stringify","folder","message","onerror","readAsText","all","then","generateAsync","type","content","saveAs","catch","current","onDragOver","preventDefault","onDrop","dataTransfer","items","directoryFiles","i","webkitGetAsEntry","isDirectory","createReader","readEntries","entries","forEach","entry","push","updatedFiles","ref","webkitdirectory","directory","multiple","event","style","display","App","showTxtToJson","setShowTxtToJson","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.f8ebd151.chunk.js","sourcesContent":["import React from 'react';\nimport AceEditor from 'react-ace';\n\nimport 'ace-builds/src-noconflict/mode-html';\nimport 'ace-builds/src-noconflict/theme-monokai';\n\nconst PdfMaker = ({ html, setHtml }) => {\n  const handleCodeChange = (newValue) => {\n    setHtml(newValue);\n  };\n\n  return (\n    <div className=\"pdf-maker\">\n      <AceEditor\n            mode=\"html\"\n            theme=\"monokai\"\n            onChange={handleCodeChange}\n            name=\"UNIQUE_ID_OF_DIV\"\n            value={html}\n            editorProps={{ $blockScrolling: true }}\n            setOptions={{\n                useWorker: false\n            }}\n            width=\"100%\"\n            height=\"100%\" \n        />\n\n    </div>\n  );\n};\n\nexport default PdfMaker;\n","import React from 'react';\nimport './HtmlWindow.css';\n\nconst HtmlWindow = ({ htmlContent }) => {\n  return (\n    <div className=\"preview-container\">\n      <iframe srcDoc={htmlContent} title=\"HTML Preview\"></iframe>\n    </div>\n  );\n};\n\nexport default HtmlWindow;\n","import React, { useState } from 'react';\nimport './ConvertButton.css';\n\nconst ConvertButton = ({ html }) => {\n  const [isConverting, setIsConverting] = useState(false); // Добавляем состояние для отслеживания процесса конвертации\n\n  const handleConvertToPDF = async () => {\n    setIsConverting(true); // Начинаем процесс конвертации, делаем кнопку неактивной\n    try {\n      const response = await fetch('/generate-pdf', {\n        method: 'POST',\n        headers: { 'Content-Type': 'text/html' },\n        body: html,\n      });\n\n      if (response.ok) {\n        const blob = await response.blob();\n        const url = window.URL.createObjectURL(blob);\n        const a = document.createElement('a');\n        a.href = url;\n        a.download = 'converted-document.pdf';\n        document.body.appendChild(a);\n        a.click();\n        document.body.removeChild(a);\n        window.URL.revokeObjectURL(url);\n      } else {\n        console.error('Server responded with an error.');\n      }\n    } catch (error) {\n      console.error('An error occurred:', error);\n    } finally {\n      setIsConverting(false); // Завершаем процесс конвертации, делаем кнопку снова активной\n    }\n  };\n\n  return (\n    <button className=\"convert-button\" onClick={handleConvertToPDF} disabled={isConverting}>\n      {isConverting ? 'Converting...' : 'Convert to PDF'}\n    </button>\n  );\n};\n\nexport default ConvertButton;\n","import React, { useState, useRef } from 'react';\nimport { processFiles } from './processFiles';\nimport './TxtToJson.css';\n\nconst TxtToJson = ({ onClose, isVisible }) => {\n  const [folderName, setFolderName] = useState('Choose Folder');\n  const [isConverting, setIsConverting] = useState(false);\n  const fileInputRef = useRef(null);\n\n  const updateFolderNameAndFiles = (files) => {\n    if (files.length > 0) {\n      const name = files[0].webkitRelativePath.split('/')[0];\n      setFolderName(name);\n      return files; \n    }\n    return [];\n  };\n\n  const handleFileChange = (event) => {\n    const files = updateFolderNameAndFiles(event.target.files);\n    if (files.length > 0) {\n      handleConvert(files, folderName);\n    }\n  };\n\n  const handleDragOver = (e) => {\n    e.preventDefault(); \n  };\n\n  const handleDrop = (e) => {\n    e.preventDefault(); \n    const files = e.dataTransfer.items;\n    if (files) {\n      const directoryFiles = [];\n      for (let i = 0; i < files.length; i++) {\n        if (files[i].webkitGetAsEntry && files[i].webkitGetAsEntry().isDirectory) {\n          const directoryReader = files[i].webkitGetAsEntry().createReader();\n          directoryReader.readEntries((entries) => {\n            entries.forEach((entry) => {\n              entry.file((file) => {\n                directoryFiles.push(file);\n                if (directoryFiles.length === entries.length) {\n                  const updatedFiles = updateFolderNameAndFiles(directoryFiles);\n                  handleConvert(updatedFiles, folderName);\n                }\n              });\n            });\n          });\n          break; \n        }\n      }\n    }\n  };\n\n  const handleConvert = (files, name) => {\n    if (!isConverting && files.length > 0) {\n      setIsConverting(true);\n      processFiles(files, name)\n        .then(() => {\n          setIsConverting(false);\n          onClose(); \n        })\n        .catch(error => {\n          console.error(\"Conversion error:\", error);\n          setIsConverting(false);\n        });\n    }\n  };\n\n  return (\n    <div className={`txt-to-json-panel ${isVisible ? 'visible' : ''}`}>\n      <button className=\"close-btn\" onClick={onClose}>×</button>\n      <div className=\"drop-zone\" onClick={() => fileInputRef.current.click()} onDragOver={handleDragOver} onDrop={handleDrop}>\n        {folderName}\n        <input type=\"file\" ref={fileInputRef} webkitdirectory=\"true\" directory=\"true\" multiple onChange={handleFileChange} style={{ display: 'none' }} />\n      </div>\n      <button className=\"convert-button\" onClick={() => handleConvert(fileInputRef.current.files, folderName)} disabled={isConverting}>\n        {isConverting ? 'Converting...' : 'Convert'}\n      </button>\n    </div>\n  );\n};\n\nexport default TxtToJson;\n","import JSZip from 'jszip';\nimport { saveAs } from 'file-saver';\n\nexport const processFiles = (files, folderName) => {\n  return new Promise((resolve, reject) => {\n    if (files.length === 0) {\n      reject(new Error(\"No files selected\"));\n      return;\n    }\n\n    const jsonFileName = prompt(\"Enter a name for the JSON files:\", folderName) || folderName;\n\n    const outputName = jsonFileName.replace(/-out$/, '') + '-out';\n    const zip = new JSZip();\n\n    const fileReadPromises = Array.from(files).map(file => {\n      return new Promise((resolveFile, rejectFile) => {\n        const reader = new FileReader();\n\n        reader.onload = function(e) {\n          try {\n            const content = e.target.result;\n\n            const blocks = content.match(/\\{\\{(.+?)\\}\\}/g)?.reduce((acc, block, index) => {\n              const key = `block_${String(index).padStart(2, '0')}`;\n              let value = block.replace(/\\{\\{|\\}\\}/g, '').trim();\n              value = value.replace(/@@(.*?)@@/g, '<b>$1</b>');\n              acc[key] = value;\n              return acc;\n            }, {});\n\n            const localeMatch = file.name.match(/_(\\w{2})_\\w{2}_/);\n            const locale = localeMatch ? localeMatch[1] : 'unknown';\n            const jsonContent = JSON.stringify(blocks ?? {}, null, 4);\n\n            zip.folder(`${outputName}/${locale}`).file(`${jsonFileName}.json`, jsonContent);\n            resolveFile();\n          } catch (error) {\n            rejectFile(new Error(`Failed to process file ${file.name}: ${error.message}`));\n          }\n        };\n\n        reader.onerror = () => {\n          rejectFile(new Error(`Failed to read file ${file.name}`));\n        };\n\n        reader.readAsText(file);\n      });\n    });\n\n    Promise.all(fileReadPromises)\n      .then(() => {\n        zip.generateAsync({ type: \"blob\" })\n          .then(content => {\n            saveAs(content, `${outputName}.zip`);\n            resolve();\n          })\n          .catch(error => {\n            reject(new Error(`Failed to generate zip: ${error.message}`));\n          });\n      })\n      .catch(reject);\n  });\n};\n","import React, { useState } from 'react';\nimport PdfMaker from './components/PdfMaker/PdfMaker';\nimport HtmlWindow from './components/HtmlWindow/HtmlWindow';\nimport ConvertButton from './components/ConvertButton/ConvertButton';\nimport TxtToJson from './components/TxtToJson/TxtToJson';\nimport './App.css';\n\nconst App = () => {\n  const [html, setHtml] = useState('');\n  const [showTxtToJson, setShowTxtToJson] = useState(false);\n\n  return (\n    <div className=\"App\">\n      <div className=\"content-area\">\n        <PdfMaker html={html} setHtml={setHtml} />\n        <HtmlWindow htmlContent={html} />\n      </div>\n      <div className=\"buttons-area\">\n        <ConvertButton html={html} />\n        <button className=\"convert-button txt-to-json-toggle\" onClick={() => setShowTxtToJson(!showTxtToJson)}>\n  {showTxtToJson ? 'Close Txt to JSON' : 'Txt to JSON'}\n</button>\n\n      </div>\n      <TxtToJson onClose={() => setShowTxtToJson(false)} isVisible={showTxtToJson} />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\n\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n"],"sourceRoot":""}